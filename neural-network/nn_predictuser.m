% Trains a neural network to predict exact user.

%% Load data
filename = '../feature_extraction/matlab.csv';
data = csvread(filename);

%% Preprocess data so that inputs and outputs are columns
% filter out 0, 1 users
data = data(data(:,1) ~= 0 & data(:,1) ~= 1,:);

% To filter out just two users:
% data = data(data(:,1) == 144 | data(:,1) == 145,:);

userids = data(:,1)';

uniq = unique(userids);
freq = zeros(1, length(uniq));

target = zeros(length(uniq), length(userids));
for i = 1:length(uniq)
    for j = 1:length(userids)
        if (userids(j) == uniq(i))
            target(i,j) = 1;
            freq(i) = freq(i) + 1;
        end
    end
end

inputs = data(:,2:end)';
disp('frequencies of user IDs:')
disp(freq)

% run nprtool - predict `target` from `inputs`
% training: 80%, validation: 10%, testing: 10%
% => 60 inputs, 10 hidden neurons, 61 output neurons

% 10 hidden neurons, max. 6 checks => testing %E 93.121

% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 30-Dec-2015 11:41:39
%
% This script assumes these variables are defined:
%
%   inputs - input data.
%   target - target data.

x = inputs;
t = target;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
%trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.
trainFcn = 'trainbr';

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize);
net.trainParam.showWindow = false;
net.trainParam.showCommandLine = true;
net.trainParam.epochs = 10000;
net.trainParam.max_fail = 1000;  % maximum failed validation checks in a row

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)